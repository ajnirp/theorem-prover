Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> VARIABLE
Rule 2     expression -> FALSE
Rule 3     expression -> expression IMPLIES expression
Rule 4     expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

FALSE                : 2
IMPLIES              : 3
LPAREN               : 4
RPAREN               : 4
VARIABLE             : 1
error                : 

Nonterminals, with rules where they appear

expression           : 3 3 4 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . VARIABLE
    (2) expression -> . FALSE
    (3) expression -> . expression IMPLIES expression
    (4) expression -> . LPAREN expression RPAREN

    VARIABLE        shift and go to state 3
    FALSE           shift and go to state 4
    LPAREN          shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (3) expression -> expression . IMPLIES expression

    IMPLIES         shift and go to state 5


state 2

    (4) expression -> LPAREN . expression RPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . FALSE
    (3) expression -> . expression IMPLIES expression
    (4) expression -> . LPAREN expression RPAREN

    VARIABLE        shift and go to state 3
    FALSE           shift and go to state 4
    LPAREN          shift and go to state 2

    expression                     shift and go to state 6

state 3

    (1) expression -> VARIABLE .

    IMPLIES         reduce using rule 1 (expression -> VARIABLE .)
    $end            reduce using rule 1 (expression -> VARIABLE .)
    RPAREN          reduce using rule 1 (expression -> VARIABLE .)


state 4

    (2) expression -> FALSE .

    IMPLIES         reduce using rule 2 (expression -> FALSE .)
    $end            reduce using rule 2 (expression -> FALSE .)
    RPAREN          reduce using rule 2 (expression -> FALSE .)


state 5

    (3) expression -> expression IMPLIES . expression
    (1) expression -> . VARIABLE
    (2) expression -> . FALSE
    (3) expression -> . expression IMPLIES expression
    (4) expression -> . LPAREN expression RPAREN

    VARIABLE        shift and go to state 3
    FALSE           shift and go to state 4
    LPAREN          shift and go to state 2

    expression                     shift and go to state 7

state 6

    (4) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . IMPLIES expression

    RPAREN          shift and go to state 8
    IMPLIES         shift and go to state 5


state 7

    (3) expression -> expression IMPLIES expression .
    (3) expression -> expression . IMPLIES expression

  ! shift/reduce conflict for IMPLIES resolved as shift
    $end            reduce using rule 3 (expression -> expression IMPLIES expression .)
    RPAREN          reduce using rule 3 (expression -> expression IMPLIES expression .)
    IMPLIES         shift and go to state 5

  ! IMPLIES         [ reduce using rule 3 (expression -> expression IMPLIES expression .) ]


state 8

    (4) expression -> LPAREN expression RPAREN .

    IMPLIES         reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (expression -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IMPLIES in state 7 resolved as shift
